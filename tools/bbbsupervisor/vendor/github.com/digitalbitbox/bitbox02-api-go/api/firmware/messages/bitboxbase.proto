// Copyright 2019 Shift Cryptosecurity AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// Should be sent every X seconds (TBD) unless the firmware already is busy with a command.
message BitBoxBaseHeartbeatRequest {
  enum StateCode {
    IDLE = 0;
    WORKING = 1;
    WARNING = 2;
    ERROR = 3;
  };
  enum DescriptionCode {
    EMPTY = 0;
    INITIAL_BLOCK_SYNC = 1;
    DOWNLOAD_UPDATE = 2;
    OUT_OF_DISK_SPACE = 3;
    REDIS_ERROR = 4;
    REBOOT = 5;
    SHUTDOWN = 6;
    UPDATE_FAILED = 7;
    NO_NETWORK_CONNECTION = 8;
  };

  StateCode state_code = 1;
  DescriptionCode description_code = 2;
}

// This will display the first 20 characters of the base32 encoded version of
// the provided msg
message BitBoxBaseConfirmPairingRequest {
  bytes msg = 1;
}

// Optional fields can be represented by a "oneof" with only one field in it.
// All fields are technically optional. But in reality the default value for the type will be set.
// It is therefore impossible to distinguish between the default value and if the value wasn't set.
// So any fields that have a default value which also is a valid value can use this method to send
// an empty value.
message BitBoxBaseSetConfigRequest {
  enum StatusLedMode {
    LED_ALWAYS = 0; // display on led when status is IDLE, WORKING, WARNING and ERROR
    LED_ON_WORKING = 1; // display on led when status is WORKING, WARNING and ERROR
    LED_ON_WARNING = 2; // display on led when status is WARNING and ERROR
    LED_ON_ERROR = 3; // display on led when status is ERROR
  }
  enum StatusScreenMode {
    SCREEN_ALWAYS = 0; // display on screen when status is IDLE, WORKING, WARNING and ERROR
    SCREEN_ON_WORKING = 1; // display on screen when status is WORKING, WARNING and ERROR
    SCREEN_ON_WARNING = 2; // display on screen when status is WARNING and ERROR
    SCREEN_ON_ERROR = 3; // display on screen when status is ERROR
  }

  StatusLedMode status_led_mode = 1;
  StatusScreenMode status_screen_mode = 2;
  // 0.0.0.0 which is the default value of ip is also a valid IP, use the oneof-trick to determine
  // if IP wasn't set in the message.
  oneof ip_option {
        bytes ip = 3;
  }
  string hostname = 4; // Empty string means unsetting the hostname
}

message BitBoxBaseDisplayStatusRequest {
  uint32 duration = 1;
}

message BitBoxBaseRequest {
  oneof request {
    BitBoxBaseHeartbeatRequest heartbeat = 1;
    BitBoxBaseSetConfigRequest set_config = 2;
    BitBoxBaseConfirmPairingRequest confirm_pairing = 3;
    BitBoxBaseDisplayStatusRequest display_status = 4;
  }
}
