// Code generated by protoc-gen-go. DO NOT EDIT.
// source: btc.proto

package messages

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BTCCoin int32

const (
	BTCCoin_BTC  BTCCoin = 0
	BTCCoin_TBTC BTCCoin = 1
	BTCCoin_LTC  BTCCoin = 2
	BTCCoin_TLTC BTCCoin = 3
)

var BTCCoin_name = map[int32]string{
	0: "BTC",
	1: "TBTC",
	2: "LTC",
	3: "TLTC",
}

var BTCCoin_value = map[string]int32{
	"BTC":  0,
	"TBTC": 1,
	"LTC":  2,
	"TLTC": 3,
}

func (x BTCCoin) String() string {
	return proto.EnumName(BTCCoin_name, int32(x))
}

func (BTCCoin) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{0}
}

type BTCScriptType int32

const (
	BTCScriptType_SCRIPT_UNKNOWN     BTCScriptType = 0
	BTCScriptType_SCRIPT_P2PKH       BTCScriptType = 1
	BTCScriptType_SCRIPT_P2WPKH_P2SH BTCScriptType = 2
	BTCScriptType_SCRIPT_P2WPKH      BTCScriptType = 3
)

var BTCScriptType_name = map[int32]string{
	0: "SCRIPT_UNKNOWN",
	1: "SCRIPT_P2PKH",
	2: "SCRIPT_P2WPKH_P2SH",
	3: "SCRIPT_P2WPKH",
}

var BTCScriptType_value = map[string]int32{
	"SCRIPT_UNKNOWN":     0,
	"SCRIPT_P2PKH":       1,
	"SCRIPT_P2WPKH_P2SH": 2,
	"SCRIPT_P2WPKH":      3,
}

func (x BTCScriptType) String() string {
	return proto.EnumName(BTCScriptType_name, int32(x))
}

func (BTCScriptType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{1}
}

type BTCOutputType int32

const (
	BTCOutputType_UNKNOWN BTCOutputType = 0
	BTCOutputType_P2PKH   BTCOutputType = 1
	BTCOutputType_P2SH    BTCOutputType = 2
	BTCOutputType_P2WPKH  BTCOutputType = 3
	BTCOutputType_P2WSH   BTCOutputType = 4
)

var BTCOutputType_name = map[int32]string{
	0: "UNKNOWN",
	1: "P2PKH",
	2: "P2SH",
	3: "P2WPKH",
	4: "P2WSH",
}

var BTCOutputType_value = map[string]int32{
	"UNKNOWN": 0,
	"P2PKH":   1,
	"P2SH":    2,
	"P2WPKH":  3,
	"P2WSH":   4,
}

func (x BTCOutputType) String() string {
	return proto.EnumName(BTCOutputType_name, int32(x))
}

func (BTCOutputType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{2}
}

type BTCPubRequest_OutputType int32

const (
	BTCPubRequest_TPUB    BTCPubRequest_OutputType = 0
	BTCPubRequest_XPUB    BTCPubRequest_OutputType = 1
	BTCPubRequest_YPUB    BTCPubRequest_OutputType = 2
	BTCPubRequest_ZPUB    BTCPubRequest_OutputType = 3
	BTCPubRequest_ADDRESS BTCPubRequest_OutputType = 4
)

var BTCPubRequest_OutputType_name = map[int32]string{
	0: "TPUB",
	1: "XPUB",
	2: "YPUB",
	3: "ZPUB",
	4: "ADDRESS",
}

var BTCPubRequest_OutputType_value = map[string]int32{
	"TPUB":    0,
	"XPUB":    1,
	"YPUB":    2,
	"ZPUB":    3,
	"ADDRESS": 4,
}

func (x BTCPubRequest_OutputType) String() string {
	return proto.EnumName(BTCPubRequest_OutputType_name, int32(x))
}

func (BTCPubRequest_OutputType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{0, 0}
}

type BTCSignNextResponse_Type int32

const (
	BTCSignNextResponse_INPUT  BTCSignNextResponse_Type = 0
	BTCSignNextResponse_OUTPUT BTCSignNextResponse_Type = 1
	BTCSignNextResponse_DONE   BTCSignNextResponse_Type = 2
)

var BTCSignNextResponse_Type_name = map[int32]string{
	0: "INPUT",
	1: "OUTPUT",
	2: "DONE",
}

var BTCSignNextResponse_Type_value = map[string]int32{
	"INPUT":  0,
	"OUTPUT": 1,
	"DONE":   2,
}

func (x BTCSignNextResponse_Type) String() string {
	return proto.EnumName(BTCSignNextResponse_Type_name, int32(x))
}

func (BTCSignNextResponse_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{2, 0}
}

type BTCPubRequest struct {
	Keypath              []uint32                 `protobuf:"varint,1,rep,packed,name=keypath,proto3" json:"keypath,omitempty"`
	ScriptType           BTCScriptType            `protobuf:"varint,2,opt,name=script_type,json=scriptType,proto3,enum=BTCScriptType" json:"script_type,omitempty"`
	Coin                 BTCCoin                  `protobuf:"varint,3,opt,name=coin,proto3,enum=BTCCoin" json:"coin,omitempty"`
	OutputType           BTCPubRequest_OutputType `protobuf:"varint,4,opt,name=output_type,json=outputType,proto3,enum=BTCPubRequest_OutputType" json:"output_type,omitempty"`
	Display              bool                     `protobuf:"varint,5,opt,name=display,proto3" json:"display,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *BTCPubRequest) Reset()         { *m = BTCPubRequest{} }
func (m *BTCPubRequest) String() string { return proto.CompactTextString(m) }
func (*BTCPubRequest) ProtoMessage()    {}
func (*BTCPubRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{0}
}

func (m *BTCPubRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCPubRequest.Unmarshal(m, b)
}
func (m *BTCPubRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCPubRequest.Marshal(b, m, deterministic)
}
func (m *BTCPubRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCPubRequest.Merge(m, src)
}
func (m *BTCPubRequest) XXX_Size() int {
	return xxx_messageInfo_BTCPubRequest.Size(m)
}
func (m *BTCPubRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCPubRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BTCPubRequest proto.InternalMessageInfo

func (m *BTCPubRequest) GetKeypath() []uint32 {
	if m != nil {
		return m.Keypath
	}
	return nil
}

func (m *BTCPubRequest) GetScriptType() BTCScriptType {
	if m != nil {
		return m.ScriptType
	}
	return BTCScriptType_SCRIPT_UNKNOWN
}

func (m *BTCPubRequest) GetCoin() BTCCoin {
	if m != nil {
		return m.Coin
	}
	return BTCCoin_BTC
}

func (m *BTCPubRequest) GetOutputType() BTCPubRequest_OutputType {
	if m != nil {
		return m.OutputType
	}
	return BTCPubRequest_TPUB
}

func (m *BTCPubRequest) GetDisplay() bool {
	if m != nil {
		return m.Display
	}
	return false
}

type BTCSignInitRequest struct {
	Coin                 BTCCoin       `protobuf:"varint,1,opt,name=coin,proto3,enum=BTCCoin" json:"coin,omitempty"`
	ScriptType           BTCScriptType `protobuf:"varint,2,opt,name=script_type,json=scriptType,proto3,enum=BTCScriptType" json:"script_type,omitempty"`
	Bip44Account         uint32        `protobuf:"varint,3,opt,name=bip44_account,json=bip44Account,proto3" json:"bip44_account,omitempty"`
	Version              uint32        `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	NumInputs            uint32        `protobuf:"varint,5,opt,name=num_inputs,json=numInputs,proto3" json:"num_inputs,omitempty"`
	NumOutputs           uint32        `protobuf:"varint,6,opt,name=num_outputs,json=numOutputs,proto3" json:"num_outputs,omitempty"`
	Locktime             uint32        `protobuf:"varint,7,opt,name=locktime,proto3" json:"locktime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *BTCSignInitRequest) Reset()         { *m = BTCSignInitRequest{} }
func (m *BTCSignInitRequest) String() string { return proto.CompactTextString(m) }
func (*BTCSignInitRequest) ProtoMessage()    {}
func (*BTCSignInitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{1}
}

func (m *BTCSignInitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCSignInitRequest.Unmarshal(m, b)
}
func (m *BTCSignInitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCSignInitRequest.Marshal(b, m, deterministic)
}
func (m *BTCSignInitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCSignInitRequest.Merge(m, src)
}
func (m *BTCSignInitRequest) XXX_Size() int {
	return xxx_messageInfo_BTCSignInitRequest.Size(m)
}
func (m *BTCSignInitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCSignInitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BTCSignInitRequest proto.InternalMessageInfo

func (m *BTCSignInitRequest) GetCoin() BTCCoin {
	if m != nil {
		return m.Coin
	}
	return BTCCoin_BTC
}

func (m *BTCSignInitRequest) GetScriptType() BTCScriptType {
	if m != nil {
		return m.ScriptType
	}
	return BTCScriptType_SCRIPT_UNKNOWN
}

func (m *BTCSignInitRequest) GetBip44Account() uint32 {
	if m != nil {
		return m.Bip44Account
	}
	return 0
}

func (m *BTCSignInitRequest) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BTCSignInitRequest) GetNumInputs() uint32 {
	if m != nil {
		return m.NumInputs
	}
	return 0
}

func (m *BTCSignInitRequest) GetNumOutputs() uint32 {
	if m != nil {
		return m.NumOutputs
	}
	return 0
}

func (m *BTCSignInitRequest) GetLocktime() uint32 {
	if m != nil {
		return m.Locktime
	}
	return 0
}

type BTCSignNextResponse struct {
	Type         BTCSignNextResponse_Type `protobuf:"varint,1,opt,name=type,proto3,enum=BTCSignNextResponse_Type" json:"type,omitempty"`
	Index        uint32                   `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	HasSignature bool                     `protobuf:"varint,3,opt,name=has_signature,json=hasSignature,proto3" json:"has_signature,omitempty"`
	// 64 bytes (32 bytes big endian R, 32 bytes big endian S). Only if has_signature is true.
	Signature            []byte   `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BTCSignNextResponse) Reset()         { *m = BTCSignNextResponse{} }
func (m *BTCSignNextResponse) String() string { return proto.CompactTextString(m) }
func (*BTCSignNextResponse) ProtoMessage()    {}
func (*BTCSignNextResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{2}
}

func (m *BTCSignNextResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCSignNextResponse.Unmarshal(m, b)
}
func (m *BTCSignNextResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCSignNextResponse.Marshal(b, m, deterministic)
}
func (m *BTCSignNextResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCSignNextResponse.Merge(m, src)
}
func (m *BTCSignNextResponse) XXX_Size() int {
	return xxx_messageInfo_BTCSignNextResponse.Size(m)
}
func (m *BTCSignNextResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCSignNextResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BTCSignNextResponse proto.InternalMessageInfo

func (m *BTCSignNextResponse) GetType() BTCSignNextResponse_Type {
	if m != nil {
		return m.Type
	}
	return BTCSignNextResponse_INPUT
}

func (m *BTCSignNextResponse) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *BTCSignNextResponse) GetHasSignature() bool {
	if m != nil {
		return m.HasSignature
	}
	return false
}

func (m *BTCSignNextResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type BTCSignInputRequest struct {
	PrevOutHash          []byte   `protobuf:"bytes,1,opt,name=prevOutHash,proto3" json:"prevOutHash,omitempty"`
	PrevOutIndex         uint32   `protobuf:"varint,2,opt,name=prevOutIndex,proto3" json:"prevOutIndex,omitempty"`
	PrevOutValue         uint64   `protobuf:"varint,3,opt,name=prevOutValue,proto3" json:"prevOutValue,omitempty"`
	Sequence             uint32   `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Keypath              []uint32 `protobuf:"varint,6,rep,packed,name=keypath,proto3" json:"keypath,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BTCSignInputRequest) Reset()         { *m = BTCSignInputRequest{} }
func (m *BTCSignInputRequest) String() string { return proto.CompactTextString(m) }
func (*BTCSignInputRequest) ProtoMessage()    {}
func (*BTCSignInputRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{3}
}

func (m *BTCSignInputRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCSignInputRequest.Unmarshal(m, b)
}
func (m *BTCSignInputRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCSignInputRequest.Marshal(b, m, deterministic)
}
func (m *BTCSignInputRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCSignInputRequest.Merge(m, src)
}
func (m *BTCSignInputRequest) XXX_Size() int {
	return xxx_messageInfo_BTCSignInputRequest.Size(m)
}
func (m *BTCSignInputRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCSignInputRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BTCSignInputRequest proto.InternalMessageInfo

func (m *BTCSignInputRequest) GetPrevOutHash() []byte {
	if m != nil {
		return m.PrevOutHash
	}
	return nil
}

func (m *BTCSignInputRequest) GetPrevOutIndex() uint32 {
	if m != nil {
		return m.PrevOutIndex
	}
	return 0
}

func (m *BTCSignInputRequest) GetPrevOutValue() uint64 {
	if m != nil {
		return m.PrevOutValue
	}
	return 0
}

func (m *BTCSignInputRequest) GetSequence() uint32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *BTCSignInputRequest) GetKeypath() []uint32 {
	if m != nil {
		return m.Keypath
	}
	return nil
}

type BTCSignOutputRequest struct {
	Ours bool          `protobuf:"varint,1,opt,name=ours,proto3" json:"ours,omitempty"`
	Type BTCOutputType `protobuf:"varint,2,opt,name=type,proto3,enum=BTCOutputType" json:"type,omitempty"`
	// 20 bytes for p2pkh, p2sh, pw2wpkh. 32 bytes for p2wsh.
	Value                uint64   `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Hash                 []byte   `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	Keypath              []uint32 `protobuf:"varint,5,rep,packed,name=keypath,proto3" json:"keypath,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BTCSignOutputRequest) Reset()         { *m = BTCSignOutputRequest{} }
func (m *BTCSignOutputRequest) String() string { return proto.CompactTextString(m) }
func (*BTCSignOutputRequest) ProtoMessage()    {}
func (*BTCSignOutputRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{4}
}

func (m *BTCSignOutputRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCSignOutputRequest.Unmarshal(m, b)
}
func (m *BTCSignOutputRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCSignOutputRequest.Marshal(b, m, deterministic)
}
func (m *BTCSignOutputRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCSignOutputRequest.Merge(m, src)
}
func (m *BTCSignOutputRequest) XXX_Size() int {
	return xxx_messageInfo_BTCSignOutputRequest.Size(m)
}
func (m *BTCSignOutputRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCSignOutputRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BTCSignOutputRequest proto.InternalMessageInfo

func (m *BTCSignOutputRequest) GetOurs() bool {
	if m != nil {
		return m.Ours
	}
	return false
}

func (m *BTCSignOutputRequest) GetType() BTCOutputType {
	if m != nil {
		return m.Type
	}
	return BTCOutputType_UNKNOWN
}

func (m *BTCSignOutputRequest) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *BTCSignOutputRequest) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *BTCSignOutputRequest) GetKeypath() []uint32 {
	if m != nil {
		return m.Keypath
	}
	return nil
}

func init() {
	proto.RegisterEnum("BTCCoin", BTCCoin_name, BTCCoin_value)
	proto.RegisterEnum("BTCScriptType", BTCScriptType_name, BTCScriptType_value)
	proto.RegisterEnum("BTCOutputType", BTCOutputType_name, BTCOutputType_value)
	proto.RegisterEnum("BTCPubRequest_OutputType", BTCPubRequest_OutputType_name, BTCPubRequest_OutputType_value)
	proto.RegisterEnum("BTCSignNextResponse_Type", BTCSignNextResponse_Type_name, BTCSignNextResponse_Type_value)
	proto.RegisterType((*BTCPubRequest)(nil), "BTCPubRequest")
	proto.RegisterType((*BTCSignInitRequest)(nil), "BTCSignInitRequest")
	proto.RegisterType((*BTCSignNextResponse)(nil), "BTCSignNextResponse")
	proto.RegisterType((*BTCSignInputRequest)(nil), "BTCSignInputRequest")
	proto.RegisterType((*BTCSignOutputRequest)(nil), "BTCSignOutputRequest")
}

func init() { proto.RegisterFile("btc.proto", fileDescriptor_a38f9ffa5c78f451) }

var fileDescriptor_a38f9ffa5c78f451 = []byte{
	// 666 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xad, 0x13, 0x27, 0x71, 0x26, 0x71, 0x65, 0x96, 0x0a, 0x19, 0x54, 0x44, 0x64, 0x0e, 0x54,
	0x95, 0x48, 0xa5, 0xd2, 0x13, 0xb7, 0x26, 0xad, 0x94, 0xa8, 0x28, 0xb1, 0xd6, 0x0e, 0x05, 0x2e,
	0xc1, 0x71, 0x57, 0x8d, 0xd5, 0x76, 0x6d, 0xb2, 0xeb, 0xa8, 0xf9, 0x0c, 0xf8, 0x17, 0x7e, 0x81,
	0xcf, 0x42, 0x68, 0xc7, 0x76, 0xec, 0x20, 0x2e, 0xdc, 0xde, 0xbc, 0x9d, 0x1d, 0xcf, 0x7b, 0xb3,
	0x63, 0x68, 0x2f, 0x64, 0xd8, 0x4f, 0x56, 0xb1, 0x8c, 0x9d, 0xef, 0x35, 0x30, 0x07, 0xfe, 0xd0,
	0x4d, 0x17, 0x94, 0x7d, 0x4b, 0x99, 0x90, 0xc4, 0x86, 0xd6, 0x1d, 0xdb, 0x24, 0x81, 0x5c, 0xda,
	0x5a, 0xaf, 0x7e, 0x64, 0xd2, 0x22, 0x24, 0x27, 0xd0, 0x11, 0xe1, 0x2a, 0x4a, 0xe4, 0x5c, 0x6e,
	0x12, 0x66, 0xd7, 0x7a, 0xda, 0xd1, 0xfe, 0xe9, 0x7e, 0x7f, 0xe0, 0x0f, 0x3d, 0xa4, 0xfd, 0x4d,
	0xc2, 0x28, 0x88, 0x2d, 0x26, 0x87, 0xa0, 0x87, 0x71, 0xc4, 0xed, 0x3a, 0x66, 0x1a, 0x2a, 0x73,
	0x18, 0x47, 0x9c, 0x22, 0x4b, 0xde, 0x43, 0x27, 0x4e, 0x65, 0x92, 0xe6, 0xe5, 0x74, 0x4c, 0x7a,
	0xde, 0xdf, 0xe9, 0xa6, 0x3f, 0xc5, 0x8c, 0xac, 0x72, 0xbc, 0xc5, 0xaa, 0xc9, 0x9b, 0x48, 0x24,
	0xf7, 0xc1, 0xc6, 0x6e, 0xf4, 0xb4, 0x23, 0x83, 0x16, 0xa1, 0x73, 0x0e, 0x50, 0xde, 0x21, 0x06,
	0xe8, 0xbe, 0x3b, 0x1b, 0x58, 0x7b, 0x0a, 0x7d, 0x52, 0x48, 0x53, 0xe8, 0xb3, 0x42, 0x35, 0x85,
	0xbe, 0x28, 0x54, 0x27, 0x1d, 0x68, 0x9d, 0x5f, 0x5c, 0xd0, 0x4b, 0xcf, 0xb3, 0x74, 0xe7, 0xb7,
	0x06, 0x44, 0x89, 0x8a, 0x6e, 0xf9, 0x98, 0x47, 0xb2, 0x30, 0xa6, 0x50, 0xa3, 0xfd, 0x53, 0xcd,
	0x7f, 0x9b, 0xf3, 0x1a, 0xcc, 0x45, 0x94, 0x9c, 0x9d, 0xcd, 0x83, 0x30, 0x8c, 0x53, 0x2e, 0xd1,
	0x25, 0x93, 0x76, 0x91, 0x3c, 0xcf, 0x38, 0xa5, 0x73, 0xcd, 0x56, 0x22, 0x8a, 0x39, 0xfa, 0x63,
	0xd2, 0x22, 0x24, 0x2f, 0x01, 0x78, 0xfa, 0x30, 0x8f, 0x78, 0x92, 0x4a, 0x81, 0x26, 0x98, 0xb4,
	0xcd, 0xd3, 0x87, 0x31, 0x12, 0xe4, 0x15, 0x74, 0xd4, 0x71, 0x66, 0x99, 0xb0, 0x9b, 0x78, 0xae,
	0x6e, 0x64, 0xe6, 0x08, 0xf2, 0x02, 0x8c, 0xfb, 0x38, 0xbc, 0x93, 0xd1, 0x03, 0xb3, 0x5b, 0x78,
	0xba, 0x8d, 0x9d, 0x5f, 0x1a, 0x3c, 0xcd, 0x0d, 0x98, 0xb0, 0x47, 0x49, 0x99, 0x48, 0x62, 0x2e,
	0x18, 0x79, 0x0b, 0x3a, 0x8a, 0xd3, 0xca, 0x51, 0xfd, 0x9d, 0xd3, 0x47, 0x9d, 0x98, 0x46, 0x0e,
	0xa0, 0x11, 0xf1, 0x1b, 0xf6, 0x88, 0x66, 0x98, 0x34, 0x0b, 0x94, 0xee, 0x65, 0x20, 0xe6, 0x22,
	0xba, 0xe5, 0x81, 0x4c, 0x57, 0x0c, 0x75, 0x1b, 0xb4, 0xbb, 0x0c, 0x84, 0x57, 0x70, 0xe4, 0x10,
	0xda, 0x65, 0x82, 0x52, 0xde, 0xa5, 0x25, 0xe1, 0xbc, 0x01, 0x1d, 0x2d, 0x6c, 0x43, 0x63, 0x3c,
	0x71, 0x67, 0xbe, 0xb5, 0x47, 0x00, 0x9a, 0xd3, 0x99, 0xaf, 0x30, 0x0e, 0xf8, 0x62, 0x3a, 0xb9,
	0xb4, 0x6a, 0xce, 0xcf, 0x52, 0x08, 0xfa, 0x52, 0x8c, 0xb2, 0x07, 0x9d, 0x64, 0xc5, 0xd6, 0xd3,
	0x54, 0x8e, 0x02, 0xb1, 0x44, 0x3d, 0x5d, 0x5a, 0xa5, 0x88, 0x03, 0xdd, 0x3c, 0x1c, 0x57, 0x24,
	0xec, 0x70, 0x95, 0x9c, 0x8f, 0xc1, 0x7d, 0x9a, 0x09, 0xd1, 0xe9, 0x0e, 0xa7, 0x6c, 0x16, 0xea,
	0xa3, 0x3c, 0x64, 0xf9, 0x04, 0xb7, 0x71, 0x75, 0xd3, 0x9a, 0x3b, 0x9b, 0xe6, 0xfc, 0xd0, 0xe0,
	0x20, 0xef, 0x3b, 0x9b, 0x57, 0xd1, 0x38, 0x01, 0x3d, 0x4e, 0x57, 0x02, 0x3b, 0x36, 0x28, 0x62,
	0xe2, 0xe4, 0x53, 0xa9, 0x3c, 0xb9, 0xca, 0xd6, 0x6c, 0x47, 0xb1, 0xae, 0xf4, 0x98, 0x05, 0xaa,
	0xda, 0x52, 0xe9, 0xcf, 0x0c, 0x46, 0x5c, 0x6d, 0xaa, 0xb1, 0xd3, 0xd4, 0xf1, 0x09, 0xb4, 0xf2,
	0x27, 0x4f, 0x5a, 0x50, 0x1f, 0xf8, 0xc3, 0x6c, 0xab, 0x7c, 0x85, 0x34, 0x45, 0x7d, 0xf0, 0x87,
	0xd9, 0x52, 0xf9, 0x0a, 0xd5, 0x8f, 0xbf, 0xe2, 0xaf, 0xa5, 0x7c, 0xfe, 0x84, 0xc0, 0xbe, 0x37,
	0xa4, 0x63, 0xd7, 0x9f, 0xcf, 0x26, 0x57, 0x93, 0xe9, 0xf5, 0xc4, 0xda, 0x23, 0x16, 0x74, 0x73,
	0xce, 0x3d, 0x75, 0xaf, 0x46, 0x96, 0x46, 0x9e, 0x01, 0xd9, 0x32, 0xd7, 0xee, 0xd5, 0x68, 0xee,
	0x9e, 0x7a, 0x23, 0xab, 0x46, 0x9e, 0x80, 0xb9, 0xc3, 0x5b, 0xf5, 0xe3, 0x11, 0x7e, 0xa1, 0xb2,
	0xef, 0x1d, 0x68, 0x95, 0xa5, 0xdb, 0xd0, 0x28, 0x6a, 0x1a, 0xa0, 0xe7, 0x55, 0x00, 0x9a, 0xc5,
	0xf5, 0x2c, 0xe1, 0xda, 0x1b, 0x59, 0xfa, 0xa2, 0x89, 0xbf, 0xc3, 0x77, 0x7f, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x30, 0xce, 0x1a, 0xda, 0x1b, 0x05, 0x00, 0x00,
}
